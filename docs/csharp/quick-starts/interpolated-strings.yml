### YamlMime:Tutorial
title: <span data-ttu-id="4ef4d-101">C# dize ilişkilendirme</span><span class="sxs-lookup"><span data-stu-id="4ef4d-101">String interpolation in C#</span></span>
metadata:
  title: Dize ilişkilendirme etkileşimli öğreticisini - C# quickstarts
  description: Bu öğreticide, C# dize ilişkilendirme özelliğini etkileşimli olarak keşfetmek için tarayıcınızı kullanın. C# kod yazma ve derleme ve kodunuzu doğrudan tarayıcıda çalıştırma sonuçları görüntüleyin.
  audience: Developer
  ms.custom: mvc
  ms.topic: get-started-article
  level: Beginner
  displayType: two-column
  interactive: csharp
  nextTutorialHref: list-collection.yml
  nextTutorialTitle: <span data-ttu-id="4ef4d-105">C# koleksiyonları</span><span class="sxs-lookup"><span data-stu-id="4ef4d-105">Collections in C#</span></span>
  ms.openlocfilehash: b5db200ea9878368594a900221d11337715fb1f4
  ms.sourcegitcommit: 77d9a94dac4c05827ed0663d95e0f9ad35d6682e
  ms.translationtype: MT
  ms.contentlocale: tr-TR
  ms.lasthandoff: 05/24/2018
items:
- durationInMinutes: 2
  content: >
    <span data-ttu-id="4ef4d-106">Bu hızlı başlangıç kullanmayı öğretir [dize ilişkilendirme](../language-reference/tokens/interpolated.md) tek bir dize değerleri eklemek için.</span><span class="sxs-lookup"><span data-stu-id="4ef4d-106">This quickstart teaches you how to use [string interpolation](../language-reference/tokens/interpolated.md) to insert values into a single string.</span></span> <span data-ttu-id="4ef4d-107">Ayrıca bu değerleri sonuç dizesinde metin temsilleridir kontrol öğrenin.</span><span class="sxs-lookup"><span data-stu-id="4ef4d-107">You also learn how to control text representations of those values in the result string.</span></span> <span data-ttu-id="4ef4d-108">Yazma ve C# kodu çalıştırmak için tarayıcınızı kullanın ve üretilen sonuçları hemen görebilirsiniz.</span><span class="sxs-lookup"><span data-stu-id="4ef4d-108">You use your browser to write and run C# code and can immediately see the produced results.</span></span>
- title: <span data-ttu-id="4ef4d-109">Ara değerli bir dize oluşturma</span><span class="sxs-lookup"><span data-stu-id="4ef4d-109">Create an interpolated string</span></span>
  durationInMinutes: 2
  content: "<span data-ttu-id=\"4ef4d-110\">Aşağıdaki kod etkileşimli penceresinde çalıştırın.</span><span class=\"sxs-lookup\"><span data-stu-id=\"4ef4d-110\">Run the following code in the interactive window.</span></span> <span data-ttu-id=\"4ef4d-111\">Bunu yapmak için etkileşimli penceresinde kod yazın (Değiştir `\\<name>` adıyla) ve seçin **çalıştırmak**:</span><span class=\"sxs-lookup\"><span data-stu-id=\"4ef4d-111\">To do that, type the code in the interactive window (replace `\\<name>` with your name) and select **Run**:</span></span>\n\n```csharp\nvar name = \"<name>\";\nConsole.WriteLine($\"Hello, {name}. It's a pleasure to meet you!\");\n```\n\n<span data-ttu-id=\"4ef4d-112\">Kodu çalıştırdığınızda **çıkış** Tebrik adınızı içeren bir dize görüntüler.</span><span class=\"sxs-lookup\"><span data-stu-id=\"4ef4d-112\">When you run the code, **Output** displays a string that includes your name in the greeting.</span></span> <span data-ttu-id=\"4ef4d-113\">Dize bağımsız değişkeni <xref:System.Console.WriteLine%2A> yöntemi çağrısı bir *Ara değerli dize*.</span><span class=\"sxs-lookup\"><span data-stu-id=\"4ef4d-113\">The string argument of the <xref:System.Console.WriteLine%2A> method call is an *interpolated string*.</span></span> <span data-ttu-id=\"4ef4d-114\">Tek bir dize oluşturmanıza olanak sağlayan şablon türüdür (adlı *neden dize*) bir dizeden katıştırılmış kodu içerir.</span><span class=\"sxs-lookup\"><span data-stu-id=\"4ef4d-114\">It's a kind of template that lets you construct a single string (called the *result string*) from a string that includes embedded code.</span></span> <span data-ttu-id=\"4ef4d-115\">Ara değerli dizeler bir dizeye değerleri ekleyerek veya birkaç dizeleri birleştirme (bir araya getirme) için özellikle yararlıdır.</span><span class=\"sxs-lookup\"><span data-stu-id=\"4ef4d-115\">Interpolated strings are particularly useful for inserting values into a string or concatenating (joining together) several strings.</span></span> \n\n<span data-ttu-id=\"4ef4d-116\">Yukarıdaki örnekte, her ara değerli bir dize olmalıdır iki öğeleri içerir:</span><span class=\"sxs-lookup\"><span data-stu-id=\"4ef4d-116\">The example above contains the two elements that every interpolated string must have:</span></span> \n\n- <span data-ttu-id=\"4ef4d-117\">İle başlayan bir değişmez dize değeri `$` açılış tırnak işaretlemeden önce karakter karakter.</span><span class=\"sxs-lookup\"><span data-stu-id=\"4ef4d-117\">A string literal that begins with the `$` character before its opening quotation mark character.</span></span> <span data-ttu-id=\"4ef4d-118\">Arasında herhangi bir boşluk olamaz `$` simge ve tırnak işareti karakteri.</span><span class=\"sxs-lookup\"><span data-stu-id=\"4ef4d-118\">There can't be any spaces between the `$` symbol and the quotation mark character.</span></span> <span data-ttu-id=\"4ef4d-119\">(Görmek isterseniz ne olur bir eklerseniz, bir boşluk sonra `$` karakter etkileşimli pencerede ve güncelleştirilmiş kod çalıştırın.</span><span class=\"sxs-lookup\"><span data-stu-id=\"4ef4d-119\">(If you'd like to see what happens if you include one, insert a space after the `$` character in the interactive window and run the updated code.</span></span> <span data-ttu-id=\"4ef4d-120\">C# Derleyici complains, \"Beklenmeyen karakter '$'\".)</span><span class=\"sxs-lookup\"><span data-stu-id=\"4ef4d-120\">The C# compiler complains, \"Unexpected character '$'\".)</span></span> \n\n- <span data-ttu-id=\"4ef4d-121\">Bir veya daha fazla *Ara değerli ifadeleri*.</span><span class=\"sxs-lookup\"><span data-stu-id=\"4ef4d-121\">One or more *interpolated expressions*.</span></span> <span data-ttu-id=\"4ef4d-122\">Ara değerli bir ifadenin bir açma ve kapatma parantezi tarafından belirtilir (`{` ve `}`).</span><span class=\"sxs-lookup\"><span data-stu-id=\"4ef4d-122\">An interpolated expression is indicated by an opening and closing brace (`{` and `}`).</span></span> <span data-ttu-id=\"4ef4d-123\">Bir değer döndürür herhangi C# ifade koyabilirsiniz (de dahil olmak üzere `null`) kaşlı ayraçlar içinde.</span><span class=\"sxs-lookup\"><span data-stu-id=\"4ef4d-123\">You can put any C# expression that returns a value (including `null`) inside the braces.</span></span> \n\n<span data-ttu-id=\"4ef4d-124\">Diğer veri türlerine sahip birkaç daha fazla dize ilişkilendirme örnek deneyelim.</span><span class=\"sxs-lookup\"><span data-stu-id=\"4ef4d-124\">Let's try a few more string interpolation examples with some other data types.</span></span>\n\n> [!NOTE]\n> <span data-ttu-id=\"4ef4d-125\">Bu çevrimiçi kodlama önizleme modunda deneyimidir.</span><span class=\"sxs-lookup\"><span data-stu-id=\"4ef4d-125\">This online coding experience is in preview mode.</span></span> <span data-ttu-id=\"4ef4d-126\">Lütfen bunları sorunlarla karşılaşırsanız, rapor [dotnet/deneyin depoyu üzerinde](https://github.com/dotnet/try/issues).</span><span class=\"sxs-lookup\"><span data-stu-id=\"4ef4d-126\">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>\n"
- title: <span data-ttu-id="4ef4d-127">Farklı veri türlerini içerir</span><span class="sxs-lookup"><span data-stu-id="4ef4d-127">Include different data types</span></span>
  durationInMinutes: 5
  content: "<span data-ttu-id=\"4ef4d-128\">Önceki adımda dize ilişkilendirme içinde başka bir dize eklemek için kullanılır.</span><span class=\"sxs-lookup\"><span data-stu-id=\"4ef4d-128\">In the previous step, you used string interpolation to insert one string inside of another.</span></span> <span data-ttu-id=\"4ef4d-129\">Ara değerli ifade sonucu herhangi bir veri türü yine de olabilir.</span><span class=\"sxs-lookup\"><span data-stu-id=\"4ef4d-129\">The result of an interpolated expression can be of any data type, though.</span></span> <span data-ttu-id=\"4ef4d-130\">Şimdi Ara değerli bir dize çeşitli veri türlerinin değerlerini içerir.</span><span class=\"sxs-lookup\"><span data-stu-id=\"4ef4d-130\">Let's include values of various data types in an interpolated string.</span></span> \n\n<span data-ttu-id=\"4ef4d-131\">Aşağıdaki örnekte, ilk olarak, tanımlarız bir [sınıfı](../programming-guide/classes-and-structs/classes.md) veri türü `Vegetable` olan `Name` [özelliği](../properties.md) ve `ToString` [yöntemi](../methods.md), hangi [geçersiz kılmaları](../language-reference/keywords/override.md) davranışını <xref:System.Object.ToString?displayProperty=nameWithType> yöntemi.</span><span class=\"sxs-lookup\"><span data-stu-id=\"4ef4d-131\">In the following example, first, we define a [class](../programming-guide/classes-and-structs/classes.md) data type `Vegetable` that has the `Name` [property](../properties.md) and the `ToString` [method](../methods.md), which [overrides](../language-reference/keywords/override.md) the behavior of the <xref:System.Object.ToString?displayProperty=nameWithType> method.</span></span> <span data-ttu-id=\"4ef4d-132\">[ `public` Erişim değiştiricisi](../language-reference/keywords/public.md) bu yöntem dize gösterimini almak için herhangi bir istemci kod için kullanılabilir hale getirir bir `Vegetable` örneği.</span><span class=\"sxs-lookup\"><span data-stu-id=\"4ef4d-132\">The [`public` access modifier](../language-reference/keywords/public.md) makes that method available to any client code to get the string representation of a `Vegetable` instance.</span></span> <span data-ttu-id=\"4ef4d-133\">Örnekte `Vegetable.ToString` yöntemi değerini döndürür `Name` konumunda başlatılan özelliği `Vegetable` [Oluşturucusu](../programming-guide/classes-and-structs/constructors.md): `Vegetable(string name) => Name = name;`.</span><span class=\"sxs-lookup\"><span data-stu-id=\"4ef4d-133\">In the example the `Vegetable.ToString` method returns the value of the `Name` property that is initialized at the `Vegetable` [constructor](../programming-guide/classes-and-structs/constructors.md): `Vegetable(string name) => Name = name;`.</span></span> <span data-ttu-id=\"4ef4d-134\">Biz örneği oluşturup `Vegetable` kullanarak sınıfı [ `new` anahtar sözcüğü](../language-reference/keywords/new-operator.md) ve Oluşturucusu name parametresi sağlanarak `Vegetable`.</span><span class=\"sxs-lookup\"><span data-stu-id=\"4ef4d-134\">Then we create an instance of the `Vegetable` class by using [`new` keyword](../language-reference/keywords/new-operator.md) and providing a name parameter for the constructor `Vegetable`.</span></span> <span data-ttu-id=\"4ef4d-135\">Son olarak, bu da içeren Ara değerli bir dize örneğine eklediğimiz bir <xref:System.DateTime> değeri, bir <xref:System.Decimal> değeri ve `Unit` [numaralandırma](../programming-guide/enumeration-types.md) değeri.</span><span class=\"sxs-lookup\"><span data-stu-id=\"4ef4d-135\">Finally, we include that instance into an interpolated string that also contains a <xref:System.DateTime> value, a <xref:System.Decimal> value, and a `Unit` [enumeration](../programming-guide/enumeration-types.md) value.</span></span> <span data-ttu-id=\"4ef4d-136\">Aşağıdaki kod etkileşimli penceresinde çalıştırın:</span><span class=\"sxs-lookup\"><span data-stu-id=\"4ef4d-136\">Run the following code in the interactive window:</span></span>\n\n```csharp\npublic class Vegetable\n{\n   public Vegetable(string name) => Name = name;\n\n   public string Name { get; }\n\n   public override string ToString() => Name;\n}\n\npublic enum Unit { item, pound, ounce, dozen };\n\nvar item = new Vegetable(\"eggplant\");\nvar date = DateTime.Now;\nvar price = 1.99m;\nvar unit = Unit.item;\nConsole.WriteLine($\"On {date}, the price of {item} was {price} per {unit}.\");\n```\n\n<span data-ttu-id=\"4ef4d-137\">Unutmayın Ara değerli ifade `item` Ara değerli dizesinde çözümler sonuç dizesinde \"eggplant\" metin.</span><span class=\"sxs-lookup\"><span data-stu-id=\"4ef4d-137\">Note that the interpolated expression `item` in the interpolated string resolves to the text \"eggplant\" in the result string.</span></span> <span data-ttu-id=\"4ef4d-138\">İfade sonucunun türü dize olmadığı durumlarda, sonuç aşağıdaki biçimde bir dizeye çözülmüş nedeni:</span><span class=\"sxs-lookup\"><span data-stu-id=\"4ef4d-138\">That's because, when the type of the expression result is not a string, the result is resolved to a string in the following way:</span></span>\n\n- <span data-ttu-id=\"4ef4d-139\">Ara değerli ifade değerlendirilirse `null`, boş bir dize (\"\", veya <xref:System.String.Empty?displayProperty=nameWithType>) kullanılır.</span><span class=\"sxs-lookup\"><span data-stu-id=\"4ef4d-139\">If the interpolated expression evaluates to `null`, an empty string (\"\", or <xref:System.String.Empty?displayProperty=nameWithType>) is used.</span></span>\n\n- <span data-ttu-id=\"4ef4d-140\">Ara değerli ifadesini değerlendiremedi değil, `null`, genellikle `ToString` sonuç türü yöntemi çağrılır.</span><span class=\"sxs-lookup\"><span data-stu-id=\"4ef4d-140\">If the interpolated expression doesn't evaluate to `null`, typically the `ToString` method of the result type is called.</span></span> <span data-ttu-id=\"4ef4d-141\">Bu uygulanması güncelleştirerek test `Vegetable.ToString` yöntemi.</span><span class=\"sxs-lookup\"><span data-stu-id=\"4ef4d-141\">You can test this by updating the implementation of the `Vegetable.ToString` method.</span></span> <span data-ttu-id=\"4ef4d-142\">Hatta uygulamak gerekmeyebilir `ToString` her türü bu yöntem bazı uygulaması olduğundan yöntemi.</span><span class=\"sxs-lookup\"><span data-stu-id=\"4ef4d-142\">You might not even need to implement the `ToString` method since every type has some implementation of this method.</span></span> <span data-ttu-id=\"4ef4d-143\">Bunu test etmek için açıklama tanımı `Vegetable.ToString` örnekte yöntemi (Bunu yapmak için bir açıklama simgesini put `//`, onu önünde).</span><span class=\"sxs-lookup\"><span data-stu-id=\"4ef4d-143\">To test this, comment out the definition of the `Vegetable.ToString` method in the example (to do that, put a comment symbol, `//`, in front of it).</span></span> <span data-ttu-id=\"4ef4d-144\">Çıktıda varsayılan davranışı olan tam olarak nitelenmiş tür adıyla (C# REPL türü adı ile birlikte tarafından tanımlanan ad alanı), \"eggplant\" dizesi değiştirilir, <xref:System.Object.ToString?displayProperty=nameWithType> yöntemi.</span><span class=\"sxs-lookup\"><span data-stu-id=\"4ef4d-144\">In the output, the string \"eggplant\" is replaced by the fully qualified type name (the namespace defined by the C# REPL along with the type name), which is the default behavior of the <xref:System.Object.ToString?displayProperty=nameWithType> method.</span></span> <span data-ttu-id=\"4ef4d-145\">Varsayılan davranışını `ToString` bir numaralandırma değeri için yöntemidir değeri dize gösterimini dönün.</span><span class=\"sxs-lookup\"><span data-stu-id=\"4ef4d-145\">The default behavior of the `ToString` method for an enumeration value is to return the string representation of the value.</span></span>    \n\n<span data-ttu-id=\"4ef4d-146\">Bu örnek çıkışı, tarih (eggplant fiyat saniyede değiştirmez) çok kesin ve Fiyat değerini para birimi göstermez.</span><span class=\"sxs-lookup\"><span data-stu-id=\"4ef4d-146\">In the output from this example, the date is too precise (the price of eggplant doesn't change every second), and the price value doesn't indicate a unit of currency.</span></span> <span data-ttu-id=\"4ef4d-147\">Sonraki adımda, dize ifadesi sonuçları gösterimlerini biçimini kontrol ederek bu sorunları gidermeye yönelik bilgi edineceksiniz.</span><span class=\"sxs-lookup\"><span data-stu-id=\"4ef4d-147\">In the next step, you'll learn how to fix those issues by controlling the format of string representations of the expression results.</span></span>\n\n> [!NOTE]\n> <span data-ttu-id=\"4ef4d-148\">Bu çevrimiçi kodlama önizleme modunda deneyimidir.</span><span class=\"sxs-lookup\"><span data-stu-id=\"4ef4d-148\">This online coding experience is in preview mode.</span></span> <span data-ttu-id=\"4ef4d-149\">Lütfen bunları sorunlarla karşılaşırsanız, rapor [dotnet/deneyin depoyu üzerinde](https://github.com/dotnet/try/issues).</span><span class=\"sxs-lookup\"><span data-stu-id=\"4ef4d-149\">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>\n"
- title: <span data-ttu-id="4ef4d-150">Ara değerli ifadelerin biçimlendirme denetimi</span><span class="sxs-lookup"><span data-stu-id="4ef4d-150">Control the formatting of interpolated expressions</span></span>
  durationInMinutes: 5
  content: >
    <span data-ttu-id="4ef4d-151">Önceki adımda, iki hatalı biçimlendirilmiş dizeler sonuç dizeye eklendi.</span><span class="sxs-lookup"><span data-stu-id="4ef4d-151">In the previous step, two poorly formatted strings were inserted into the result string.</span></span> <span data-ttu-id="4ef4d-152">Bir yalnızca tarih uygun bir tarih ve saat değeri idi.</span><span class="sxs-lookup"><span data-stu-id="4ef4d-152">One was a date and time value for which only the date was appropriate.</span></span> <span data-ttu-id="4ef4d-153">İkinci para birimi, birim belirtmek istemediğiniz bir fiyat oluştu.</span><span class="sxs-lookup"><span data-stu-id="4ef4d-153">The second was a price that didn't indicate its unit of currency.</span></span> <span data-ttu-id="4ef4d-154">Her iki adresine kolay sorunlardır.</span><span class="sxs-lookup"><span data-stu-id="4ef4d-154">Both issues are easy to address.</span></span> <span data-ttu-id="4ef4d-155">Dize ilişkilendirme belirtmenize olanak sağlar *biçim dizeleri* kontrol eden biçimlendirme belirli tür.</span><span class="sxs-lookup"><span data-stu-id="4ef4d-155">String interpolation lets you specify *format strings* that control the formatting of particular types.</span></span> <span data-ttu-id="4ef4d-156">Çağrı değiştirme `Console.WriteLine` önceki örnekten tarih ve fiyat ifadeler için biçim dizeleri aşağıdaki satırda gösterildiği gibi ekleyin:</span><span class="sxs-lookup"><span data-stu-id="4ef4d-156">Modify the call to `Console.WriteLine` from the previous example to include the format strings for the date and price expressions as shown in the following line:</span></span>


    ```csharp

    Console.WriteLine($"On {date:d}, the price of {item} was {price:C2} per {unit}.");

    ```


    <span data-ttu-id="4ef4d-157">Ara değerli ifadesi iki nokta ile izleyerek bir biçim dizesi belirtin (":") ve biçim dizesi.</span><span class="sxs-lookup"><span data-stu-id="4ef4d-157">You specify a format string by following the interpolated expression with a colon (":") and the format string.</span></span> <span data-ttu-id="4ef4d-158">"d" bir [standart tarih ve saat biçim dizesi](../../standard/base-types/standard-date-and-time-format-strings.md#the-short-date-d-format-specifier) kısa tarih biçiminde temsil eden.</span><span class="sxs-lookup"><span data-stu-id="4ef4d-158">"d" is a [standard date and time format string](../../standard/base-types/standard-date-and-time-format-strings.md#the-short-date-d-format-specifier) that represents the short date format.</span></span> <span data-ttu-id="4ef4d-159">"C2" olan bir [standart sayısal biçim dizesi](../../standard/base-types/standard-numeric-format-strings.md#the-currency-c-format-specifier) bir sayı olarak iki basamaklı bir para birimi değeri ondalık ayırıcıdan sonra temsil eden.</span><span class="sxs-lookup"><span data-stu-id="4ef4d-159">"C2" is a [standard numeric format string](../../standard/base-types/standard-numeric-format-strings.md#the-currency-c-format-specifier) that represents a number as a currency value with two digits after the decimal point.</span></span>


    <span data-ttu-id="4ef4d-160">.NET kitaplıklarına türlerinde bir dizi önceden tanımlanmış bir biçim dizeleri kümesini destekler.</span><span class="sxs-lookup"><span data-stu-id="4ef4d-160">A number of types in the .NET libraries support a predefined set of format strings.</span></span> <span data-ttu-id="4ef4d-161">Bu, tüm sayısal türler ve tarih ve saat türleri içerir.</span><span class="sxs-lookup"><span data-stu-id="4ef4d-161">These include all the numeric types and the date and time types.</span></span> <span data-ttu-id="4ef4d-162">Biçim dizeleri destekleyen türler tam bir listesi için bkz: [biçim dizeleri ve .NET sınıf kitaplığı türleri](../../standard/base-types/formatting-types.md#stringRef) içinde [.NET biçimlendirme türleri](../../standard/base-types/formatting-types.md) makalesi.</span><span class="sxs-lookup"><span data-stu-id="4ef4d-162">For a complete list of types that support format strings, see [Format Strings and .NET Class Library Types](../../standard/base-types/formatting-types.md#stringRef) in the [Formatting Types in .NET](../../standard/base-types/formatting-types.md) article.</span></span>


    <span data-ttu-id="4ef4d-163">Bunlar tarih ve saat ile sayısal değerin biçimlendirme nasıl etkilediğini görmek için örnekte biçim dizeleri değiştirmeyi deneyin.</span><span class="sxs-lookup"><span data-stu-id="4ef4d-163">Try modifying the format strings in the example to see how they affect the formatting of the date and time and the numeric value.</span></span> <span data-ttu-id="4ef4d-164">"D" değiştirmek `{date:d}` "(kısa saat biçimine görüntülemek için) t", "(yıl ve ay görüntülemek için) y" ve "yyyy" (yılı dört basamaklı bir sayı görüntülemek için).</span><span class="sxs-lookup"><span data-stu-id="4ef4d-164">Change the "d" in `{date:d}` to "t" (to display the short time format), "y" (to display the year and month), and "yyyy" (to display the year as a four-digit number).</span></span> <span data-ttu-id="4ef4d-165">"C2" değiştirmek `{price:C2}` "e" (üstel gösterimde) ve (için ondalık ayırıcıdan sonra üç basamaklı sayısal bir değer) "F3".</span><span class="sxs-lookup"><span data-stu-id="4ef4d-165">Change the "C2" in `{price:C2}` to "e" (for exponential notation) and "F3" (for a numeric value with three digits after the decimal point).</span></span>


    <span data-ttu-id="4ef4d-166">Biçimlendirme denetleme ek olarak sonuç dizesinde bulunan biçimlendirilmiş dizeler hizalamasını ve alan genişliği de denetleyebilirsiniz.</span><span class="sxs-lookup"><span data-stu-id="4ef4d-166">In addition to controlling formatting, you can also control the field width and alignment of the formatted strings that are included in the result string.</span></span> <span data-ttu-id="4ef4d-167">Sonraki adımda, bunun nasıl yapılacağı öğreneceksiniz.</span><span class="sxs-lookup"><span data-stu-id="4ef4d-167">In the next step, you'll learn how to do this.</span></span>


    > [!NOTE]

    > <span data-ttu-id="4ef4d-168">Bu çevrimiçi kodlama önizleme modunda deneyimidir.</span><span class="sxs-lookup"><span data-stu-id="4ef4d-168">This online coding experience is in preview mode.</span></span> <span data-ttu-id="4ef4d-169">Lütfen bunları sorunlarla karşılaşırsanız, rapor [dotnet/deneyin depoyu üzerinde](https://github.com/dotnet/try/issues).</span><span class="sxs-lookup"><span data-stu-id="4ef4d-169">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
- title: <span data-ttu-id="4ef4d-170">Ara değerli ifadeleri hizalamasını ve alan genişliği denetleme</span><span class="sxs-lookup"><span data-stu-id="4ef4d-170">Control the field width and alignment of interpolated expressions</span></span>
  durationInMinutes: 6
  content: >
    <span data-ttu-id="4ef4d-171">Ara değerli bir ifadenin sonucu dize olarak biçimlendirildiğinde normalde, bu dize bir sonuç dizesinde başında veya sonunda boşluk dahil edilir.</span><span class="sxs-lookup"><span data-stu-id="4ef4d-171">Ordinarily, when the result of an interpolated expression is formatted to string, that string is included in a result string without leading or trailing spaces.</span></span> <span data-ttu-id="4ef4d-172">Özellikle, bir veri kümesiyle bir alan genişliği denetim sahibi çalışırken ve metin hizalamasını daha okunabilir bir çıktı oluşturmak için yardımcı olur.</span><span class="sxs-lookup"><span data-stu-id="4ef4d-172">Particularly when you work with a set of data, being able to control a field width and text alignment helps to produce a more readable output.</span></span> <span data-ttu-id="4ef4d-173">Bu görmek için aşağıdaki kodu çalıştırın:</span><span class="sxs-lookup"><span data-stu-id="4ef4d-173">To see this, run the following code:</span></span>


    ```csharp
      var inventory = new Dictionary<string, int>()
      {
          ["hammer, ball pein"] = 18,
          ["hammer, cross pein"] = 5,
          ["screwdriver, Phillips #2"] = 14
      };

      Console.WriteLine($"Inventory on {DateTime.Now:d}");
      Console.WriteLine(" ");
      Console.WriteLine($"|{"Item",-25}|{"Quantity",10}|");
      foreach (var item in inventory)
         Console.WriteLine($"|{item.Key,-25}|{item.Value,10}|");
    ```


    <span data-ttu-id="4ef4d-174">Sola hizalı öğe adları ve bunların sayıları sağa hizalı.</span><span class="sxs-lookup"><span data-stu-id="4ef4d-174">The item names are left-aligned, and their quantities are right-aligned.</span></span> <span data-ttu-id="4ef4d-175">Virgül ekleyerek hizalamasını belirtin (",") Ara değerli bir ifade sonra ve belirleme *minimum* alan genişliği.</span><span class="sxs-lookup"><span data-stu-id="4ef4d-175">You specify the alignment by adding a comma (",") after an interpolated expression and designating the *minimum* field width.</span></span> <span data-ttu-id="4ef4d-176">Belirtilen değer pozitif bir sayı ise, sağa hizalı alanıdır.</span><span class="sxs-lookup"><span data-stu-id="4ef4d-176">If the specified value is a positive number, the field is right-aligned.</span></span> <span data-ttu-id="4ef4d-177">Negatif bir sayı ise, sola hizalı alanıdır.</span><span class="sxs-lookup"><span data-stu-id="4ef4d-177">If it is a negative number, the field is left-aligned.</span></span>


    <span data-ttu-id="4ef4d-178">Gelen negatif işaretler kaldırmayı deneyin `{"Item",-25}` ve `{item.Key,-25}` kod ve örnek yeniden çalıştırın.</span><span class="sxs-lookup"><span data-stu-id="4ef4d-178">Try removing the negative signs from the `{"Item",-25}` and `{item.Key,-25}` code and run the example again.</span></span> <span data-ttu-id="4ef4d-179">Bu süre, sağa hizalı öğe adları.</span><span class="sxs-lookup"><span data-stu-id="4ef4d-179">This time, the item names are right-aligned.</span></span>


    <span data-ttu-id="4ef4d-180">Hizalama belirticisi ve tek bir ara değerli ifade için bir biçim dizesi birleştirebilirsiniz.</span><span class="sxs-lookup"><span data-stu-id="4ef4d-180">You can combine an alignment specifier and a format string for a single interpolated expression.</span></span> <span data-ttu-id="4ef4d-181">Bunu yapmak için ardından iki nokta ve biçim dizesi hizalama önce belirtin.</span><span class="sxs-lookup"><span data-stu-id="4ef4d-181">To do that, specify the alignment first, followed by a colon and the format string.</span></span> <span data-ttu-id="4ef4d-182">Tanımlanan genişlikleriyle ile üç biçimlendirilmiş dizeler görüntüler aşağıdaki kodu deneyin:</span><span class="sxs-lookup"><span data-stu-id="4ef4d-182">Try the following code that displays three formatted strings with defined field widths:</span></span>


    ```csharp

    Console.WriteLine($"[{DateTime.Now,-20:d}] Hour [{DateTime.Now,-10:HH}] [{1063.342,15:N2}] feet");

    ```


    > [!NOTE]

    > <span data-ttu-id="4ef4d-183">Bu çevrimiçi kodlama önizleme modunda deneyimidir.</span><span class="sxs-lookup"><span data-stu-id="4ef4d-183">This online coding experience is in preview mode.</span></span> <span data-ttu-id="4ef4d-184">Lütfen bunları sorunlarla karşılaşırsanız, rapor [dotnet/deneyin depoyu üzerinde](https://github.com/dotnet/try/issues).</span><span class="sxs-lookup"><span data-stu-id="4ef4d-184">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
- content: "<span data-ttu-id=\"4ef4d-185\">Dize ilişkilendirme quickstart tamamladınız.</span><span class=\"sxs-lookup\"><span data-stu-id=\"4ef4d-185\">You've completed the string interpolation quickstart.</span></span> \n\n<span data-ttu-id=\"4ef4d-186\">Kendi yerel geliştirme ortamında bu quickstarts devam edebilirsiniz.</span><span class=\"sxs-lookup\"><span data-stu-id=\"4ef4d-186\">You can continue these quickstarts in your own local development environment.</span></span> <span data-ttu-id=\"4ef4d-187\">Temel bilgileri öğrenmek [yerel geliştirme](local-environment.md) ve bir Hızlı Başlangıç'ı seçin.</span><span class=\"sxs-lookup\"><span data-stu-id=\"4ef4d-187\">Learn the basics of [local development](local-environment.md) and then pick a quickstart.</span></span> <span data-ttu-id=\"4ef4d-188\">Aynı Bu hızlı başlangıç deneyin, sonraki hızlı başlangıç doğrudan taşımak veya yeniden başlayın [C# numaraları](numbers-in-csharp-local.md) hızlı başlangıç.</span><span class=\"sxs-lookup\"><span data-stu-id=\"4ef4d-188\">You can try this same quickstart, move directly to the next quickstart, or start again with the [Numbers in C#](numbers-in-csharp-local.md) quickstart.</span></span>\n\n<span data-ttu-id=\"4ef4d-189\">Daha fazla bilgi için bkz: [dize ilişkilendirme](../language-reference/tokens/interpolated.md) konu ve [dize ilişkilendirme C#](../tutorials/string-interpolation.md) Öğreticisi.</span><span class=\"sxs-lookup\"><span data-stu-id=\"4ef4d-189\">For more information, see the [String interpolation](../language-reference/tokens/interpolated.md) topic and the [String interpolation in C#](../tutorials/string-interpolation.md) tutorial.</span></span>"
