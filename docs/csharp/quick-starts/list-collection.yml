### YamlMime:Tutorial
title: C# koleksiyonları
metadata:
  title: Koleksiyonları etkileşimli öğreticisini - C# quickstarts
  description: Bu öğreticide, C# etkileşimli olarak öğrenmek için tarayıcınızın kullanacaksınız. C# kod yazma ve derleme ve kodunuzu doğrudan tarayıcıda çalıştırma sonuçları görüntüleyin.
  audience: Developer
  ms.topic: quickstart
  ms.custom: mvc
  level: Beginner
  displayType: two-column
  interactive: csharp
  ms.openlocfilehash: 79861f7a04939fafd77bd7a905b8fef0e94b8966
  ms.sourcegitcommit: 15109844229ade1c6449f48f3834db1b26907824
  ms.translationtype: MT
  ms.contentlocale: tr-TR
  ms.lasthandoff: 05/07/2018
items:
- durationInMinutes: 1
  content: >
    Bu hızlı başlangıç C# etkileşimli olarak C# kod yazmak ve derleme ve kodunuzu çalıştırmaya sonuçlarını görmek için tarayıcınızı kullanarak öğretilmektedir. Bir dizi oluşturmak, değiştirmek ve Koleksiyonlar ve diziler keşfedin dersleri içerir.
- title: Listeleri oluşturma
  durationInMinutes: 2
  content: >
    Aşağıdaki kod etkileşimli penceresinde çalıştırın. Bunu yapmak için aşağıdaki kod bloğu etkileşimli penceresinde yazın (Değiştir "<name>" adıyla) tıklatıp **çalıştırmak** düğmesi:


    ```csharp

    var names = new List<string> { "<name>", "Ana", "Felipe" };

    foreach (var name in names)

    {
      Console.WriteLine($"Hello {name.ToUpper()}!");
    }

    ```


    Yalnızca dizelerinin listesini oluşturduğunuz, üç adları bu listeye eklenen ve tümü büyük harf adlarında çıkışı yazdırılmıştır. Listede ilerleyin döngü önceki quickstarts içinde öğrendiğinize kavramları kullanıyorsunuz.


    Adlarını görüntülemek için kod kullanır [dize ilişkilendirme](../language-reference/tokens/interpolated.md) özelliği. Öncesinde ne zaman bir `string` ile `$` karakter dizesi bildiriminde C# kodu katıştırmak. Gerçek dize, C# kodu ürettiği değeri ile değiştirir. Bu örnekte, yerini `{name.ToUpper()}` aradığınız çünkü her adıyla dönüştürülen büyük harfler için <xref:System.String.ToUpper%2A> yöntemi.


    Şimdi keşfetme tutun.


    > [!NOTE]

    > Bu çevrimiçi kodlama önizleme modunda deneyimidir. Lütfen bunları sorunlarla karşılaşırsanız, rapor [dotnet/deneyin depoyu üzerinde](https://github.com/dotnet/try/issues).
- title: Liste içeriklerini değiştirme
  durationInMinutes: 3
  content: >
    Kullandığı oluşturduğunuz koleksiyonda <xref:System.Collections.Generic.List%601> türü. Bu tür, öğelerin sıralarının depolar. Açılı ayraçları arasında öğelerin türü belirtin.


    Bu önemli bir özelliği <xref:System.Collections.Generic.List%601> türüdür onu büyütür veya böylelikle küçültür, ekleme veya öğeleri kaldırma olanak sağlar. Zaten yazdığınız kodun altına aşağıdaki kodu ekleyin:


    ```csharp

    Console.WriteLine();

    names.Add("Maria");

    names.Add("Bill");

    names.Remove("Ana");

    foreach (var name in names)

    {
      Console.WriteLine($"Hello {name.ToUpper()}!");
    }

    ```


    İki daha fazla ad listesinin sonuna ekledik. Ayrıca bir de kaldırdınız.


    <xref:System.Collections.Generic.List%601> Tarafından ayrı öğeleri başvuru sağlar **dizin** de. Öğelerini kullanarak erişim `[` ve `]` belirteçleri. Neleri zaten yazdıktan ve deneyin altına aşağıdaki kodu ekleyin:


    ```csharp

    Console.WriteLine($"My name is {names[0]}.");

    Console.WriteLine($"I've added {names[2]} and {names[3]} to the list.");

    ```


    Listenin sonunun erişim izin verilmez. Ne kadar süreyle listeyi kullanarak denetleyebilirsiniz <xref:System.Collections.Generic.List%601.Count%2A> özelliği. Denemek için aşağıdaki kodu ekleyin:


    ```csharp

    Console.WriteLine($"The list has {names.Count} people in it");

    ```


    Tıklatın **çalıştırmak** yeniden sonuçları görüntüleyin. Bu nedenle en büyük geçerli dizin biridir C# ' ta dizinlerini 0'da, Başlat listedeki öğeleri sayısından küçük.


    > [!NOTE]

    > Bu çevrimiçi kodlama önizleme modunda deneyimidir. Lütfen bunları sorunlarla karşılaşırsanız, rapor [dotnet/deneyin depoyu üzerinde](https://github.com/dotnet/try/issues).
- title: Arama ve sıralama listeler
  durationInMinutes: 5
  content: >
    Bizim örneklerimizi görece küçük listeleri kullanın, ancak uygulamalarınızı genellikle bazen binlerce numaralandırma pek çok daha fazla öğe ile listeleri oluşturabilirsiniz. Bu büyük koleksiyonlarda öğeleri bulmak için farklı öğeleri listede arama gerekir. <xref:System.Collections.Generic.List%601.IndexOf%2A> Yöntemi için bir öğe arar ve öğenin dizinini döndürür. Bunu nasıl çalıştığını görmek için deneyin.  Şu ana kadar yazdıklarınızı altına aşağıdaki kodu ekleyin:


    ```csharp

    var index = names.IndexOf("Felipe");

    if (index != -1)
      Console.WriteLine($"The name {names[index]} is at index {index}");

    var notFound = names.IndexOf("Not Found");
      Console.WriteLine($"When an item is not found, IndexOf returns {notFound}");
    ```


    Her zaman tarafından döndürülen dizin denetlemeniz gerekir böylece öğeyi listede olup olmadığını bilemeyebilirsiniz <xref:System.Collections.Generic.List%601.IndexOf%2A>. -1 olması durumunda öğe bulunamadı.


    Listenizdeki öğeleri de sıralanabilir. <xref:System.Collections.Generic.List%601.Sort%2A> Yöntemi (alfabetik olarak söz konusu olduğunda dizeleri) normal sıralarına listesindeki tüm öğeleri sıralar. Bu kodu ekleyin ve yeniden çalıştırın:


    ```csharp

    names.Sort();

    foreach (var name in names)

    {
      Console.WriteLine($"Hello {name.ToUpper()}!");
    }

    ```


    > [!NOTE]

    > Bu çevrimiçi kodlama önizleme modunda deneyimidir. Lütfen bunları sorunlarla karşılaşırsanız, rapor [dotnet/deneyin depoyu üzerinde](https://github.com/dotnet/try/issues).
- title: Diğer türleri listesi
  durationInMinutes: 5
  content: >
    Kullanmakta olduğunuz `string` kadarki listelerindeki türü. Olalım bir <xref:System.Collections.Generic.List%601> farklı türü kullanıyor. Şimdi bir sayı kümesi oluşturun. Şu ana kadar yazdığınız kodun silin ve bu ile değiştirin:


    ```csharp

    var fibonacciNumbers = new List<int> {1, 1};

    ```


    Tamsayı listesi oluşturur ve ilk iki tamsayı 1 değerine ayarlar. İlk iki değerlerini bunlar bir *Fibonacci dizisi*, sayılardan oluşan bir dizi. Sonraki her Fibonacci numarası, önceki iki sayı toplamı gerçekleştirerek bulunur. Bu kodu ekleyin:


    ```csharp

    var previous = fibonacciNumbers[fibonacciNumbers.Count - 1];

    var previous2 = fibonacciNumbers[fibonacciNumbers.Count - 2];


    fibonacciNumbers.Add(previous + previous2);


    foreach(var item in fibonacciNumbers)
        Console.WriteLine(item);
    ```


    Tuşuna **çalıştırmak** ; sonuçları görmek için


    > [!NOTE]

    > Bu çevrimiçi kodlama önizleme modunda deneyimidir. Lütfen bunları sorunlarla karşılaşırsanız, rapor [dotnet/deneyin depoyu üzerinde](https://github.com/dotnet/try/issues).
- title: sınama
  durationInMinutes: 10
  content: >
    Birlikte koyabilirsiniz varsa bkz bazı kavramlar bu ve önceki sürümleri dersleri. Ne kadar Fibonacci numaralarıyla derlediğiniz genişletin. Deneyin ve ilk 20 numaralarını sırayla oluşturması için kod yazın. (Bir ipucu olarak 20 Fibonacci 6765 numarasıdır.)


    > [!NOTE]

    > Bu çevrimiçi kodlama önizleme modunda deneyimidir. Lütfen bunları sorunlarla karşılaşırsanız, rapor [dotnet/deneyin depoyu üzerinde](https://github.com/dotnet/try/issues).
- title: Tam sınama
  durationInMinutes: 3
  content: "Aşağıdakine benzer ile gündeme?\n\n```csharp\nvar fibonacciNumbers = new List<int> {1, 1};\n\nwhile (fibonacciNumbers.Count < 20)\n{\n    var previous = fibonacciNumbers[fibonacciNumbers.Count - 1];\n    var previous2 = fibonacciNumbers[fibonacciNumbers.Count - 2];\n    \n    fibonacciNumbers.Add(previous + previous2);\n}\nforeach(var item in fibonacciNumbers)\n    Console.WriteLine(item);\n```\n\nHer döngü tekrarında ile son iki tamsayı listesinde, bunları birleşimi ve bu değer listesine ekleyerek yönlendiriyoruz. Listeye 20 öğeleri ekleyene kadar döngü tekrarlar.\n\n> [!NOTE]\n> Bu çevrimiçi kodlama önizleme modunda deneyimidir. Lütfen bunları sorunlarla karşılaşırsanız, rapor [dotnet/deneyin depoyu üzerinde](https://github.com/dotnet/try/issues).\n"
- content: >-
    Liste Hızlı Başlangıç tamamladınız. Bu hızlı başlangıç son etkileşimli Hızlı Başlangıç ' dir. Bu hızlı başlangıç ipuçları kendi geliştirme ortamı devam edebilirsiniz. Temel bilgileri öğrenmek [yerel geliştirme](local-environment.md) ve bir Hızlı Başlangıç'ı seçin. Bu aynı alıştırma deneyin, sonraki hızlı başlangıç doğrudan taşımak veya yeniden ile başlangıç [C# numaraları](numbers-in-csharp-local.md) hızlı başlangıç.


    İle çalışma hakkında daha fazla bilgiyi `List` yazın [.NET Kılavuzu](../../standard/index.md) konuyla ilgili [koleksiyonları](../../standard/collections/index.md). Ayrıca diğer birçok koleksiyon türleri hakkında bilgi edineceksiniz.
