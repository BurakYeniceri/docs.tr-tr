### YamlMime:Tutorial
title: "C# Ara değerli dizeler"
metadata:
  title: "Ara değerli dizeler C#. Tarihleri veya numaraları gibi diğer değerleri içeren bir dize oluşturulacağını öğrenin."
  description: "Bu öğreticide, C# Ara değerli dize özelliği etkileşimli olarak kullanabilmek için tarayıcınızı kullanacaksınız. C# kod yazma ve derleme ve kodunuzu doğrudan tarayıcıda çalıştırma sonuçları görüntüleyin."
  audience: Developer
  ms.custom: mvc
  level: Beginner
  displayType: two-column
  interactive: csharp
  nextTutorialHref: list-collection
  nextTutorialTitle: "C# koleksiyonları"
  ms.openlocfilehash: 127365a2a20043d3597ea80743b9925537e4feba
  ms.sourcegitcommit: ed26cfef4e18f6d93ab822d8c29f902cff3519d1
  ms.translationtype: MT
  ms.contentlocale: tr-TR
  ms.lasthandoff: 01/17/2018
items:
- durationInMinutes: 2
  content: "Bu hızlı başlangıç Ara değerli dizeler C# ' ta değerleri tek çıkışına dizeye etkileşimli olarak eklemek için kullanmayı öğretir. C# kod yazmak için tarayıcınızı kullanın ve hemen derleme ve kodunuzu çalıştırmaya sonuçlarını görebilirsiniz. Hızlı Başlangıç dizeyi birleştirmek, değerleri dizeleri ekleyin ve bu değerler farklı şekillerde biçimi dersleri bir dizi içerir.\n"
- title: "Ara değerli bir dize oluşturma"
  durationInMinutes: 2
  content: "Aşağıdaki kod etkileşimli penceresinde çalıştırın. Bunu yapmak için aşağıdaki kod bloğu etkileşimli penceresinde yazın (Değiştir \"<name>\" adıyla) tıklatıp **çalıştırmak** düğmesi:\n\n```csharp\nvar name = \"<name>\";\nConsole.WriteLine($\"Hello, {name}. It's a pleasure to meet you!\");\n```\n\nProgramını çalıştırdığınızda, tebrik adınızı içeren tek bir dize görüntüler. Dahil dize <xref:System.Console.WriteLine%2A> yöntemi çağrısı bir *Ara değerli dize*. Tek bir dize oluşturmanıza olanak sağlayan şablon türüdür (adlı *neden dize*) bir dizeden katıştırılmış kodu içerir. Ara değerli dizeler değerleri bir dize veya dize (bir araya getirme) birleştirme eklemek için özellikle yararlıdır. \n\nBu basit örnekte, her ara değerli bir dize olmalıdır iki öğeleri içerir: \n\n- İle başlayan bir değişmez dize değeri `$` açılış tırnak işaretlemeden önce karakter karakter. Arasında herhangi bir boşluk olamaz `$` simge ve tırnak işareti karakteri. (Görmek isterseniz ne olur bir eklerseniz, bir boşluk sonra `$` karakter etkileşimli pencerede ve tıklayın **çalıştırmak** düğmesi. C# Derleyici complains, \"Beklenmeyen karakter '$'\".) \n\n- Bir veya daha fazla *Ara değerli ifadeleri*. Ara değerli bir ifadenin bir açma ve kapatma parantezi tarafından belirtilir (`{` ve `}`). Bir değer döndürür herhangi C# ifade koyabilirsiniz (de dahil olmak üzere `null`) kaşlı ayraçlar içinde. \n\nDiğer veri türlerine sahip birkaç fazla ara değerli dize örnek deneyelim.\n\n> [!NOTE]\n> Bu çevrimiçi kodlama önizleme modunda deneyimidir. Lütfen bunları sorunlarla karşılaşırsanız, rapor [dotnet/deneyin depoyu üzerinde](https://github.com/dotnet/try/issues).\n"
- title: "Farklı veri türlerini içerir"
  durationInMinutes: 3
  content: "Önceki hızlı başlangıç, içinde başka bir dize eklemek için Ara değerli bir dize kullanılır. Ara değerli dize ifadesi ancak herhangi bir veri türü olabilir. Birden çok veri türlerinin değerlerine sahip bir ara değerli dize deneyelim. \n\nAşağıdaki örnek, Ara değerli ifadelerle içerir bir `Vegetable` nesnesi, bir üyesi `Unit` numaralandırma, bir <xref:System.DateTime> değeri ve <xref:System.Decimal> değeri. Etkileşimli penceresinde çalıştırın.\n\n```csharp\npublic class Vegetable\n{\n   public Vegetable(string name) => Name = name;\n\n   public string Name { get; }\n\n   public override string ToString() => Name;\n}\n\npublic class Example\n{\n   public enum Unit { item, pound, ounce, dozen };\n\n   public static void Main()\n   {\n      var item = new Vegetable(\"eggplant\");\n      var date = DateTime.Now;\n      var price = 1.99m;\n      var unit = Unit.item;\n      Console.WriteLine($\"On {date}, the price of {item} was {price} per {unit}.\");\n   }\n}\n```\n\nAra değerli ifadelerden biri içerdiğine dikkat edin `item` nesne konsolda görüntülenen sonuç dizesinde ve bu durumda \"eggplant\" dizesi sonuç dizesine eklenir. Ara değerli ifade türü bir dize değil, C# Derleyici aşağıdakileri yapar nedeni:\n\n- Ara değerli ifade ise `null`, Ara değerli ifade boş bir dize döndürür (\"\", veya <xref:System.String.Empty?displayProperty=nameWithType>).\n\n- Ara değerli ifade değilse `null`, `ToString` Ara değerli ifade türü yöntemi çağrılır. Bu tanımını yorum tarafından test `Vegetable.ToString` açıklama simgesini koyarak örnekte yöntemi (`//`), önünde. Çıktıda varsayılan davranışı olan tam olarak nitelenmiş tür adıyla (C# REPL türü adı ile birlikte tarafından tanımlanan ad alanı), \"eggplant\" dizesi değiştirilir, <xref:System.Object.ToString?displayProperty=nameWithType> yöntemi.   \n\nBu örnek çıkışı, tarih (eggplant fiyat ikinciye farklılık göstermez) çok kesin ve Fiyat değerini para birimi göstermez. Sonraki adımda, Ara değerli ifadeleri tarafından döndürülen dize biçimi denetleyerek bu sorunları gidermeye yönelik bilgi edineceksiniz.\n\n> [!NOTE]\n> Bu çevrimiçi kodlama önizleme modunda deneyimidir. Lütfen bunları sorunlarla karşılaşırsanız, rapor [dotnet/deneyin depoyu üzerinde](https://github.com/dotnet/try/issues).\n"
- title: "Ara değerli ifadelerin biçimlendirme denetimi"
  durationInMinutes: 5
  content: "Önceki Ders iki hatalı biçimlendirilmiş dizeler sonuç dizeye eklendi. Bir yalnızca tarih uygun bir tarih ve saat değeri idi. İkinci para birimi, birim belirtmeyen bir fiyat oluştu. Her iki adresine kolay sorunlardır. Ara değerli ifadeleri içerebilir *biçim dizeleri* kontrol eden biçimlendirme belirli tür. Çağrı değiştirme `Console.WriteLine` önceki örnekten tarih ve fiyat alanları için biçim belirticisi aşağıdaki satırda gösterildiği gibi ekleyin:\n\n```csharp\nConsole.WriteLine($\"On {date:d}, the price of {item} was {price:C2} per {unit}.\");\n```\n\nAra değerli ifade bir iki nokta üst üste ve biçim dizesi ile izleyerek bir biçim dizesi belirtin. \"d\" bir [standart tarih ve saat biçim dizesi](../../standard/base-types/standard-date-and-time-format-strings.md#the-short-date-d-format-specifier) kısa tarih biçiminde temsil eden. \"C2\" olan bir [standart sayısal biçim dizesi](../../standard/base-types/standard-numeric-format-strings.md#the-currency-c-format-specifier) bir sayı olarak iki basamaklı bir para birimi değeri ondalık ayırıcıdan sonra temsil eden.\n\n.NET standart kitaplıkları türlerinde bir dizi önceden tanımlanmış bir biçim dizeleri kümesini destekler. Bu, tüm sayısal türler ve tarih ve saat türleri içerir. Biçim dizeleri destekleyen türler tam bir listesi için bkz: [biçim dizeleri ve .NET sınıf kitaplığı türleri](../../standard/base-types/formatting-types.md#stringRef) içinde [.NET biçimlendirme türleri](../../standard/base-types/formatting-types.md) makalesi. Herhangi bir tür biçim dizeleri kümesi destekleyebilir ve varolan türleri için özel biçimlendirme sağlayan özel biçimlendirme uzantıları da geliştirebilirsiniz. Özel biçimlendirme sağlayarak hakkında bilgi için bir <xref:System.ICustomFormatter> uygulama, bkz: [özel biçimlendirme ICustomFormatter ile](../../standard/base-types/formatting-types.md#custom-formatting-with-icustomformatter) içinde [.NET biçimlendirme türleri](../../standard/base-types/formatting-types.md) makale.\n\nDeğiştirmeyi deneyin biçimi dizeleri **.NET Düzenleyicisi** bunlar tarih ve saat ile sayısal değerin biçimlendirme nasıl etkilediğini görmek için. \"D\" değiştirmek `{date:d}` \"(kısa saat biçimine görüntülemek için) t\", \"(yıl ve ay görüntülemek için) y\" ve \"yyyy\" (yılı dört basamaklı bir sayı görüntülemek için). \"C2\" değiştirmek `{price:C2}` \"e\" (üstel gösterimde) ve (için ondalık ayırıcıdan sonra üç basamaklı sayısal bir değer) \"F3\".\n\nBiçimlendirme denetleme ek olarak, bir ara değerli ifadesi tarafından döndürülen dize hizalamasını ve alan genişliği de denetleyebilirsiniz. Sonraki adımda, bunun nasıl yapılacağı öğreneceksiniz.\n\n> [!NOTE]\n> Bu çevrimiçi kodlama önizleme modunda deneyimidir. Lütfen bunları sorunlarla karşılaşırsanız, rapor [dotnet/deneyin depoyu üzerinde](https://github.com/dotnet/try/issues).\n"
- title: "Ara değerli ifadeleri hizalamasını ve alan genişliği denetleme"
  durationInMinutes: 6
  content: "Normalde, bir ara değerli ifadesi tarafından döndürülen dize sonuç dizesinde yer aldığında, başında veya sonunda boşluk içeriyor. Özellikle, kullanmakta olduğunuz bir veri kümesi, Ara değerli ifadeler ile örneklerini alan genişliği ve onun hizalamasını belirtin olanak sağlar. Bu görmek için aşağıdaki kodu çalıştırın.\n\n```csharp\n  var inventory = new Dictionary<string, int>();\n  inventory.Add(\"hammer, ball pein\", 18);\n  inventory.Add(\"hammer, cross pein\", 5);\n  inventory.Add(\"screwdriver, Phillips #2\", 14);\n\n  Console.WriteLine($\"Inventory on {DateTime.Now:d}\");\n  Console.WriteLine(\" \");\n  Console.WriteLine($\"{\"Item\",-25}    {\"Quantity\",10}\");\n  Console.WriteLine(\" \"); \n  foreach (var item in inventory)\n     Console.WriteLine($\"{item.Key,-25}     {item.Value,10}\");\n```\n\nSola hizalı öğe adları ve bunların sayıları sağa hizalı. Virgül ekleyerek hizalamasını belirtin (\",\") ifade ve alan genişliği belirleme sonra. Alan genişliği pozitif bir sayı ise, sağa hizalı alandır:\n\n```text\n{expression, width}\n```\n\nAlan genişliği negatif bir sayı ise, sola hizalı alandır:\n\n```text\n{expression, -width}\n```\nGelen negatif işaretler kaldırmayı deneyin `{\"Item\",-25}` ve `{item.Key,-25}` Ara değerli ifadeleri ve örnek yeniden çalıştırın. Bu süre, sağa hizalı öğe adı.\n\nBir alan genişliği ve tek bir ara değerli ifadede bir biçim dizesi birleştirebilirsiniz. Ardından bir iki nokta üst üste ve biçim dizesi alan genişliği önce gelir. Tanımlanan genişlikleriyle ile üç biçimlendirilmiş dizeler görüntüler aşağıdaki basit programı deneyin.\n\n```csharp\nConsole.WriteLine($\"{DateTime.Now,-20:d} Hour {DateTime.Now,-10:HH} {1063.342,15:N2} feet\");\n```\n\n> [!NOTE]\n> Bu çevrimiçi kodlama önizleme modunda deneyimidir. Lütfen bunları sorunlarla karşılaşırsanız, rapor [dotnet/deneyin depoyu üzerinde](https://github.com/dotnet/try/issues).\n"
- content: "Ara değerli dizeler hızlı başlangıç tamamladınız. \n\nBu hızlı başlangıçlar kendi yerel geliştirme ortamında devam edebilirsiniz. Temel bilgileri öğrenmek [yerel geliştirme](local-environment.md) ve Hızlı Başlangıç'ı seçin. Bu aynı alıştırma deneyin, doğrudan bir sonraki hızlı başlangıç taşımak veya yeniden başlayın [C# numaraları](numbers-in-csharp-local.md) hızlı başlangıç.\n\nAra değerli dizeler ile çalışma hakkında daha fazla bilgiyi [Ara değerli dizeler](../language-reference/keywords/interpolated-strings.md) C# Başvurusu'nda başlığı.\0"
