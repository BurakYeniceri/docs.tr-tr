### YamlMime:Tutorial
title: "C# numaraları"
metadata:
  title: "C# etkileşimli öğreticisini - C# quickstarts numaraları"
  description: "Sayısal türler hakkında Hızlı Başlat bölümünde bu C# etkileşimli olarak öğrenmek için tarayıcınızın kullanacaksınız. C# kod yazmak ve derleme ve kodunuzu doğrudan tarayıcıda çalışan sonuçlarını görmek için paylaşacağız."
  audience: Developer
  ms.topic: get-started-article
  ms.custom: mvc
  level: Beginner
  nextTutorialHref: branches-and-loops
  nextTutorialTitle: "Dal ve C# döngüler"
  displayType: two-column
  interactive: csharp
  ms.prod: .net
  ms.technology: devlang-csharp
  ms.openlocfilehash: c714763870b0755ad42f919325bca69fccc0736a
  ms.sourcegitcommit: 3a96c706e4dbb4667bf3bf37edac9e1666646f93
  ms.translationtype: MT
  ms.contentlocale: tr-TR
  ms.lasthandoff: 02/27/2018
items:
- durationInMinutes: 1
  content: "Bu hızlı başlangıç C# sayı türleri hakkında etkileşimli olarak yazma C# ve derleme ve kodunuzu çalıştırmaya sonuçlarını görmek için tarayıcınızı kullanarak öğretilmektedir. Bir dizi numaraları ve C# matematik işlemleri keşfedin dersleri içerir. Bu derslerin C# dil temelleri öğretir.\n"
- title: "Tamsayı matematik keşfedin"
  durationInMinutes: 4
  content: "Aşağıdaki kod etkileşimli penceresinde çalıştırın. Bunu yapmak için aşağıdaki kod bloğu etkileşimli penceresinde yazın ve tıklatın **çalıştırmak** düğmesi:\n\n```csharp\nint a = 18;\nint b = 6;\nint c = a + b;\nConsole.WriteLine(c);\n```\n\nTemel matematik işlemlerden tamsayılı yalnızca gördünüz. `int` Yazın gösteren bir **tamsayı**, pozitif veya negatif bir tam sayı. Kullandığınız `+` toplama simgesi. Diğer yaygın matematiksel işlemler tamsayılar şunlardır:\n\n- `-` için çıkarma\n- `*` çarpma için\n- `/` bölme için\n\n> [!TIP]\n> Bu Hızlı Başlangıç, kendi etkileşimli pencerede yazdığınız kodu değiştirerek keşfedebilirsiniz. Bu hızlı başlangıç her adımda deneyebilirsiniz örnekler verilmektedir.\n\nBu farklı işlemler inceleyerek başlayın. Bu işlemlerin her biri denemek için üçüncü satır değiştirin. Her düzenlemeden sonra tıklatın **çalıştırmak** düğmesi.\n\nÇıkarma:\n\n```csharp\nint c = a - b;\n```\n\nÇarpma:\n\n```csharp\nint c = a * b;\n```\n\nBölme: \n\n```csharp\nint c = a / b;\n```\n\nİsterseniz aynı satırda, birden çok matematik işlemleri gerçekleştirerek de deneyebilirsiniz.\n\n> [!TIP]\n> C# (veya herhangi bir programlama dili) keşfetmenizde kodu yazarken hataları hale getireceğiz. **Derleyici** bu hatalarını bulmak ve bunları sizin için rapor. Çıktı, hata iletileri içerdiğinde, örnek kod ve düzeltmek görmek için etkileşimli penceresinde kod yakından bakın.\n> Bu alıştırmada, C# kod yapısını öğrenmenize yardımcı olur.     \n\n> [!NOTE]\n> Bu çevrimiçi kodlama önizleme modunda deneyimidir. Lütfen bunları sorunlarla karşılaşırsanız, rapor [dotnet/deneyin depoyu üzerinde](https://github.com/dotnet/try/issues).\n"
- title: "İşlem sırası keşfedin"
  durationInMinutes: 7
  content: "C# dili kurallarla matematik içinde öğrenilen kurallarıyla tutarlı farklı matematik işlemlerinin önceliği tanımlar.\nÇarpma ve bölme toplama ve çıkarma daha önceliklidir.\nEtkileşimli penceresinde aşağıdaki kodu çalıştırarak keşfedin:\n\n```csharp\nint a = 5;\nint b = 4;\nint c = 2;\nint d = a + b * c;\nConsole.WriteLine(d);\n```\n\nÇıktı çarpma toplamadan önce gerçekleştirildiğini gösterir.\n\nFarklı bir işlem sırasını işlemi parantezler ekleyerek zorlayabilir veya önce gerçekleştirilen işlemler istediğiniz:\n\n```csharp\nint a = 5;\nint b = 4;\nint c = 2;\nint d = (a  + b) * c;\nConsole.WriteLine(d);\n```\n\nBirden çok sayıda farklı işlemler birleştirerek keşfedin. Yukarıdaki dördüncü satırı şuna ile değiştirin:\n\n```csharp\nint d = (a + b) - 6 * c + (12 * 4) / 3 + 12;\n```\n\nTamsayıları için ilginç bir davranıştır fark etmiş olabilirsiniz. Bir ondalık veya kesir bölümünü eklemek için sonuç bile beklediğiniz zaman tamsayı bölme her zaman bir tamsayı sonuç üretir.\n\nBu davranış görmediyseniz, aşağıdakileri deneyin:\n\n```csharp\nint a = 7;\nint b = 4;\nint c = 3;\nint d = (a  + b) / c;\nConsole.WriteLine(d);\n```\n\nTıklatın **çalıştırmak** yeniden sonuçları görüntüleyin.\n\n> [!NOTE]\n> Bu çevrimiçi kodlama önizleme modunda deneyimidir. Lütfen bunları sorunlarla karşılaşırsanız, rapor [dotnet/deneyin depoyu üzerinde](https://github.com/dotnet/try/issues).\n"
- title: "Tamsayı duyarlık ve sınırları keşfedin"
  durationInMinutes: 5
  content: "Bu son örnekten tamsayı bölme sonucu kesen gösterdi.\nAlma **kalan** kullanarak **modulo** işleci, `%` karakter:\n\n```csharp\nint a = 7;\nint b = 4;\nint c = 3;\nint d = (a  + b) / c;\nint e = (a + b) % c;\nConsole.WriteLine($\"quotient: {d}\");\nConsole.WriteLine($\"remainder: {e}\");\n```\n\nC# tamsayı türü başka bir şekilde matematiksel tamsayılar farklıdır: `int` türüne sahip minimum ve maksimum sınırlar. Bu kod, bu sınırları görmek için etkileşimli penceresinde çalıştırın:\n\n```csharp\nint max = int.MaxValue;\nint min = int.MinValue;\nConsole.WriteLine($\"The range of integers is {min} to {max}\");\n```\n\nBir hesaplama bu sınırlarını aşıyor bir değer oluşturursa, sahip olduğunuz bir **underflow** veya **taşma** koşulu. Diğer bir sınırının sarmalamak için yanıt görünür. Bu iki satır bir örnek görmek için etkileşimli penceresine ekleyin:\n\n```csharp\nint what = max + 3;\nConsole.WriteLine($\"An example of overflow: {what}\");\n```\n\nYanıt çok düşük (negatif) tamsayı yakın olduğuna dikkat edin. Aynı olan `min + 2`. Ek işlemi **taştı** tamsayı izin verilen değerleri.\nTaşma \"geçici en büyük olası tamsayı değerini küçüğe sarmalar\" yanıt çok büyük negatif bir sayı nedeni.\n\nDiğer sayısal türler farklı sınırlar ve ne zaman kullanacağınız duyarlık vardır `int` türü gereksinimlerinizi karşılayacak değil. Bu sonraki inceleyelim.\n\n> [!NOTE]\n> Bu çevrimiçi kodlama önizleme modunda deneyimidir. Lütfen bunları sorunlarla karşılaşırsanız, rapor [dotnet/deneyin depoyu üzerinde](https://github.com/dotnet/try/issues).\n"
- title: "Çift tür ile çalışma"
  durationInMinutes: 5
  content: "`double` Sayısal tür çift duyarlıklı kayan noktalı sayıyı temsil eder. Bu koşullar, yeni olabilir. A **kayan nokta** sayıdır çok büyük veya küçük büyüklüğü integral olmayan sayılar temsil etmek kullanışlıdır. **Çift duyarlıklı** daha büyük duyarlık kullanılarak bu sayı depolanır anlamına gelir **tek duyarlıklı**. Modern bilgisayarlarda tek duyarlıklı sayılar daha çift duyarlıklı kullanmak için daha yaygın bir durumdur.\nİnceleyelim. Etkileşimli penceresinde aşağıdaki kodu deneyin ve sonuç bakın:\n\n```csharp\ndouble a = 5;\ndouble b = 4;\ndouble c = 2;\ndouble d = (a  + b) / c;\nConsole.WriteLine(d);\n```\n\nYanıt sayının ondalık kısmı içerdiğine dikkat edin. Double biraz daha karmaşık bir ifadesiyle deneyin:\n\n```csharp\ndouble a = 19;\ndouble b = 23;\ndouble c = 8;\ndouble d = (a  + b) / c;\nConsole.WriteLine(d);\n```\n\nBir çift değer aralığını tamsayı değerleri çok daha fazladır. Etkileşimli penceresinde aşağıdaki kodu deneyin:\n\n```csharp\ndouble max = double.MaxValue;\ndouble min = double.MinValue;\nConsole.WriteLine($\"The range of double is {min} to {max}\");\n```\n\nBu değerleri bilimsel gösterimde yazdırılır. Sol tarafındaki sayıya `E` significand değil. Sağa üs 10 gücünü sayıdır. \n\nYalnızca ondalık sayı gibi olarak matematik hataları yuvarlama çiftleri C# olabilir. Bu kod deneyin:\n\n```csharp\ndouble third = 1.0 / 3.0;\nConsole.WriteLine(third);\n```\n\nBunu biliyor `0.3` yinelenen tam olarak aynı olup `1/3`.\n\n***Challenge***\n\nBüyük sayılar, küçük sayılar, çarpma ve bölme kullanarak diğer hesaplamalarla deneyin `double` türü.  Daha karmaşık hesaplamalar deneyin.\n\n> [!NOTE]\n> Bu çevrimiçi kodlama önizleme modunda deneyimidir. Lütfen bunları sorunlarla karşılaşırsanız, rapor [dotnet/deneyin depoyu üzerinde](https://github.com/dotnet/try/issues).\n"
- title: "Sabit noktası türleri ile çalışma"
  durationInMinutes: 8
  content: "C# temel sayısal türler gördünüz: tamsayılar ve iki katına çıkar.  Bilgi edinmek için bir tür: `decimal` türü. `decimal` Türüne sahip daha küçük bir aralık daha iyi kesinlik ancak `double`. Terim **sabit noktası** ondalık (veya ikili noktası) taşınmaz anlamına gelir. Bir göz atalım:\n\n```csharp\ndecimal min = decimal.MinValue;\ndecimal max = decimal.MaxValue;\nConsole.WriteLine($\"The range of the decimal type is {min} to {max}\");\n```\n\nAralık değerinden küçük olduğunu fark `double` türü. Aşağıdaki kod deneyerek decimal türü ile daha iyi kesinlik görebilirsiniz:\n\n```csharp\ndouble a = 1.0;\ndouble b = 3.0;\nConsole.WriteLine(a / b);\n\ndecimal c = 1.0M;\ndecimal d = 3.0M;\nConsole.WriteLine(c / d);\n```\n\n`M` Numaraları sonekidir nasıl bir sabit kullanması gerektiğini belirtmek `decimal` türü.\n\nDecimal türü kullanarak matematik ondalık konumun sağında daha fazla basamağa sahip olmadığına dikkat edin. \n\n***Challenge***\n\nFarklı sayısal türler gördüğünüze göre 2.50 santimetreden, RADIUS olduğu dairenin alanı hesaplar kod yazın. Unutmayın PI ile çarpılmış dairenin alanı kare RADIUS olduğunu. Bir ipucu: .NET PI için bir sabit içeriyor <xref:System.Math.PI?displayProperty=nameWithType> , bu değer için kullanabilirsiniz. \n\n> [!NOTE]\n> Bu çevrimiçi kodlama önizleme modunda deneyimidir. Lütfen bunları sorunlarla karşılaşırsanız, rapor [dotnet/deneyin depoyu üzerinde](https://github.com/dotnet/try/issues).\n\n19 ve 20 arasında bir yanıt almanız gerekir.\n"
- title: "Tam sınama"
  durationInMinutes: 1
  content: "Aşağıdakine benzer ile gündeme?\n\n```csharp\ndouble radius = 2.50;\ndouble area = Math.PI * radius * radius;\nConsole.WriteLine(area);\n```\n\nİsterseniz başka bir formüller deneyin.\n\n> [!NOTE]\n> Bu çevrimiçi kodlama önizleme modunda deneyimidir. Lütfen bunları sorunlarla karşılaşırsanız, rapor [dotnet/deneyin depoyu üzerinde](https://github.com/dotnet/try/issues).\n"
- content: "\"Numaraları C# ' ta\" Hızlı Başlangıç tamamladınız. \n\nBu hızlı başlangıçlar kendi geliştirme ortamında devam edebilirsiniz. Temel bilgileri öğrenmek [yerel geliştirme](local-environment.md) ve Hızlı Başlangıç'ı seçin. Bu aynı alıştırma deneyin, doğrudan bir sonraki hızlı başlangıç taşımak veya yeniden ile başlangıç [C# numaraları](numbers-in-csharp-local.md) hızlı başlangıç.\n\nAşağıdaki konularda C# numaraları hakkında daha fazla bilgi edinebilirsiniz:\n\n[Tam sayı türleri tablosu](../language-reference/keywords/integral-types-table.md)   \n[Kayan nokta türleri tablosu](../language-reference/keywords/floating-point-types-table.md)   \n[Yerleşik türler tablosu](../language-reference/keywords/built-in-types-table.md)   \n[Örtük sayısal dönüşümler tablosu](../language-reference/keywords/implicit-numeric-conversions-table.md)   \n[Açık Sayısal Dönüştürmeler Tablosu](../language-reference/keywords/explicit-numeric-conversions-table.md)\0"
