### YamlMime:Tutorial
title: C# dize ilişkilendirme
metadata:
  title: Dize ilişkilendirme etkileşimli öğreticisini - C# quickstarts
  description: Bu öğreticide, C# dize ilişkilendirme özelliğini etkileşimli olarak keşfetmek için tarayıcınızı kullanın. C# kod yazma ve derleme ve kodunuzu doğrudan tarayıcıda çalıştırma sonuçları görüntüleyin.
  audience: Developer
  ms.custom: mvc
  ms.topic: get-started-article
  level: Beginner
  displayType: two-column
  interactive: csharp
  nextTutorialHref: list-collection.yml
  nextTutorialTitle: C# koleksiyonları
  ms.openlocfilehash: ac9c8488c787b1dc9b4fb60b18834d328faa4e83
  ms.sourcegitcommit: 88f251b08bf0718ce119f3d7302f514b74895038
  ms.translationtype: MT
  ms.contentlocale: tr-TR
  ms.lasthandoff: 05/10/2018
items:
- durationInMinutes: 2
  content: >
    Bu hızlı başlangıç kullanmayı öğretir [dize ilişkilendirme](../language-reference/tokens/interpolated.md) tek bir dize değerleri eklemek için. Ayrıca bu değerleri sonuç dizesinde metin temsilleridir kontrol öğrenin. Yazma ve C# kodu çalıştırmak için tarayıcınızı kullanın ve üretilen sonuçları hemen görebilirsiniz.
- title: Ara değerli bir dize oluşturma
  durationInMinutes: 2
  content: "Aşağıdaki kod etkileşimli penceresinde çalıştırın. Bunu yapmak için etkileşimli penceresinde kod yazın (Değiştir `\\<name>` adıyla) ve seçin **çalıştırmak**:\n\n```csharp\nvar name = \"<name>\";\nConsole.WriteLine($\"Hello, {name}. It's a pleasure to meet you!\");\n```\n\nKodu çalıştırdığınızda **çıkış** Tebrik adınızı içeren bir dize görüntüler. Dize bağımsız değişkeni <xref:System.Console.WriteLine%2A> yöntemi çağrısı bir *Ara değerli dize*. Tek bir dize oluşturmanıza olanak sağlayan şablon türüdür (adlı *neden dize*) bir dizeden katıştırılmış kodu içerir. Ara değerli dizeler bir dizeye değerleri ekleyerek veya birkaç dizeleri birleştirme (bir araya getirme) için özellikle yararlıdır. \n\nYukarıdaki örnekte, her ara değerli bir dize olmalıdır iki öğeleri içerir: \n\n- İle başlayan bir değişmez dize değeri `$` açılış tırnak işaretlemeden önce karakter karakter. Arasında herhangi bir boşluk olamaz `$` simge ve tırnak işareti karakteri. (Görmek isterseniz ne olur bir eklerseniz, bir boşluk sonra `$` karakter etkileşimli pencerede ve güncelleştirilmiş kod çalıştırın. C# Derleyici complains, \"Beklenmeyen karakter '$'\".) \n\n- Bir veya daha fazla *Ara değerli ifadeleri*. Ara değerli bir ifadenin bir açma ve kapatma parantezi tarafından belirtilir (`{` ve `}`). Bir değer döndürür herhangi C# ifade koyabilirsiniz (de dahil olmak üzere `null`) kaşlı ayraçlar içinde. \n\nDiğer veri türlerine sahip birkaç daha fazla dize ilişkilendirme örnek deneyelim.\n\n> [!NOTE]\n> Bu çevrimiçi kodlama önizleme modunda deneyimidir. Lütfen bunları sorunlarla karşılaşırsanız, rapor [dotnet/deneyin depoyu üzerinde](https://github.com/dotnet/try/issues).\n"
- title: Farklı veri türlerini içerir
  durationInMinutes: 5
  content: "Önceki adımda dize ilişkilendirme içinde başka bir dize eklemek için kullanılır. Ara değerli ifade sonucu herhangi bir veri türü yine de olabilir. Şimdi Ara değerli bir dize çeşitli veri türlerinin değerlerini içerir. \n\nAşağıdaki örnekte, ilk olarak, bir özel veri türü tanımlarız `Vegetable` olan `Name` [özelliği](../properties.md) ve `ToString` yöntemi. İstemci kodu dize gösterimini almak için bu yöntemi kullanmak bir `Vegetable` örneği. Örnekte `Vegetable.ToString` yöntemi değerini döndürür `Name` konumunda başlatılan özelliği `Vegetable` Oluşturucusu: `Vegetable(string name) => Name = name;`. Biz örneği oluşturup `Vegetable` kullanarak türü `new` anahtar sözcüğü ve Oluşturucusu name parametresi sağlanarak `Vegetable`. Son olarak, bu da içeren Ara değerli bir dize örneğine eklediğimiz bir <xref:System.DateTime> değeri, bir <xref:System.Decimal> değeri ve `Unit` [numaralandırma](../programming-guide/enumeration-types.md) değeri. Aşağıdaki kod etkileşimli penceresinde çalıştırın:\n\n```csharp\npublic class Vegetable\n{\n   public Vegetable(string name) => Name = name;\n\n   public string Name { get; }\n\n   public override string ToString() => Name;\n}\n\npublic enum Unit { item, pound, ounce, dozen };\n\nvar item = new Vegetable(\"eggplant\");\nvar date = DateTime.Now;\nvar price = 1.99m;\nvar unit = Unit.item;\nConsole.WriteLine($\"On {date}, the price of {item} was {price} per {unit}.\");\n```\n\nUnutmayın Ara değerli ifade `item` Ara değerli dizesinde çözümler sonuç dizesinde \"eggplant\" metin. İfade sonucunun türü dize olmadığı durumlarda, sonuç aşağıdaki biçimde bir dizeye çözülmüş nedeni:\n\n- Ara değerli ifade değerlendirilirse `null`, boş bir dize (\"\", veya <xref:System.String.Empty?displayProperty=nameWithType>) kullanılır.\n\n- Ara değerli ifadesini değerlendiremedi değil, `null`, genellikle `ToString` sonuç türü yöntemi çağrılır. Bu uygulanması güncelleştirerek test `Vegetable.ToString` yöntemi. Hatta değil uygulayabilir `ToString` her C# veri türü bu yöntem bazı uygulaması olduğundan yöntemi. Test için açıklama tanımı `Vegetable.ToString` örnekte yöntemi (Bunu yapmak için bir açıklama simgesini put `//` önüne). Çıktıda varsayılan davranışı olan tam olarak nitelenmiş tür adıyla (C# REPL türü adı ile birlikte tarafından tanımlanan ad alanı), \"eggplant\" dizesi değiştirilir, <xref:System.Object.ToString?displayProperty=nameWithType> yöntemi. Varsayılan davranışını `ToString` bir numaralandırma türü için yöntemidir numaralandırma tanımı sırasında kullanılan bir değeri dize gösterimini dönün.   \n\nBu örnek çıkışı, tarih (eggplant fiyat saniyede değiştirmez) çok kesin ve Fiyat değerini para birimi göstermez. Sonraki adımda, dize ifadesi sonuçları gösterimlerini biçimini kontrol ederek bu sorunları gidermeye yönelik bilgi edineceksiniz.\n\n> [!NOTE]\n> Bu çevrimiçi kodlama önizleme modunda deneyimidir. Lütfen bunları sorunlarla karşılaşırsanız, rapor [dotnet/deneyin depoyu üzerinde](https://github.com/dotnet/try/issues).\n"
- title: Ara değerli ifadelerin biçimlendirme denetimi
  durationInMinutes: 5
  content: >
    Önceki adımda, iki hatalı biçimlendirilmiş dizeler sonuç dizeye eklendi. Bir yalnızca tarih uygun bir tarih ve saat değeri idi. İkinci para birimi, birim belirtmek istemediğiniz bir fiyat oluştu. Her iki adresine kolay sorunlardır. Dize ilişkilendirme belirtmenize olanak sağlar *biçim dizeleri* kontrol eden biçimlendirme belirli tür. Çağrı değiştirme `Console.WriteLine` önceki örnekten tarih ve fiyat ifadeler için biçim dizeleri aşağıdaki satırda gösterildiği gibi ekleyin:


    ```csharp

    Console.WriteLine($"On {date:d}, the price of {item} was {price:C2} per {unit}.");

    ```


    Ara değerli ifadesi iki nokta ile izleyerek bir biçim dizesi belirtin (":") ve biçim dizesi. "d" bir [standart tarih ve saat biçim dizesi](../../standard/base-types/standard-date-and-time-format-strings.md#the-short-date-d-format-specifier) kısa tarih biçiminde temsil eden. "C2" olan bir [standart sayısal biçim dizesi](../../standard/base-types/standard-numeric-format-strings.md#the-currency-c-format-specifier) bir sayı olarak iki basamaklı bir para birimi değeri ondalık ayırıcıdan sonra temsil eden.


    .NET kitaplıklarına türlerinde bir dizi önceden tanımlanmış bir biçim dizeleri kümesini destekler. Bu, tüm sayısal türler ve tarih ve saat türleri içerir. Biçim dizeleri destekleyen türler tam bir listesi için bkz: [biçim dizeleri ve .NET sınıf kitaplığı türleri](../../standard/base-types/formatting-types.md#stringRef) içinde [.NET biçimlendirme türleri](../../standard/base-types/formatting-types.md) makalesi.


    Bunlar tarih ve saat ile sayısal değerin biçimlendirme nasıl etkilediğini görmek için örnekte biçim dizeleri değiştirmeyi deneyin. "D" değiştirmek `{date:d}` "(kısa saat biçimine görüntülemek için) t", "(yıl ve ay görüntülemek için) y" ve "yyyy" (yılı dört basamaklı bir sayı görüntülemek için). "C2" değiştirmek `{price:C2}` "e" (üstel gösterimde) ve (için ondalık ayırıcıdan sonra üç basamaklı sayısal bir değer) "F3".


    Biçimlendirme denetleme ek olarak sonuç dizesinde bulunan biçimlendirilmiş dizeler hizalamasını ve alan genişliği de denetleyebilirsiniz. Sonraki adımda, bunun nasıl yapılacağı öğreneceksiniz.


    > [!NOTE]

    > Bu çevrimiçi kodlama önizleme modunda deneyimidir. Lütfen bunları sorunlarla karşılaşırsanız, rapor [dotnet/deneyin depoyu üzerinde](https://github.com/dotnet/try/issues).
- title: Ara değerli ifadeleri hizalamasını ve alan genişliği denetleme
  durationInMinutes: 6
  content: >
    Ara değerli bir ifadenin sonucu dize olarak biçimlendirildiğinde normalde, bu dize bir sonuç dizesinde başında veya sonunda boşluk dahil edilir. Özellikle, bir veri kümesiyle bir alan genişliği denetim sahibi çalışırken ve metin hizalamasını daha okunabilir bir çıktı oluşturmak için yardımcı olur. Bu görmek için aşağıdaki kodu çalıştırın:


    ```csharp
      var inventory = new Dictionary<string, int>()
      {
          ["hammer, ball pein"] = 18,
          ["hammer, cross pein"] = 5,
          ["screwdriver, Phillips #2"] = 14
      };

      Console.WriteLine($"Inventory on {DateTime.Now:d}");
      Console.WriteLine(" ");
      Console.WriteLine($"|{"Item",-25}|{"Quantity",10}|");
      foreach (var item in inventory)
         Console.WriteLine($"|{item.Key,-25}|{item.Value,10}|");
    ```


    Sola hizalı öğe adları ve bunların sayıları sağa hizalı. Virgül ekleyerek hizalamasını belirtin (",") Ara değerli bir ifade sonra ve belirleme *minimum* alan genişliği. Belirtilen değer pozitif bir sayı ise, sağa hizalı alanıdır. Negatif bir sayı ise, sola hizalı alanıdır.


    Gelen negatif işaretler kaldırmayı deneyin `{"Item",-25}` ve `{item.Key,-25}` kod ve örnek yeniden çalıştırın. Bu süre, sağa hizalı öğe adları.


    Hizalama belirticisi ve tek bir ara değerli ifade için bir biçim dizesi birleştirebilirsiniz. Bunu yapmak için ardından iki nokta ve biçim dizesi hizalama önce belirtin. Tanımlanan genişlikleriyle ile üç biçimlendirilmiş dizeler görüntüler aşağıdaki kodu deneyin:


    ```csharp

    Console.WriteLine($"[{DateTime.Now,-20:d}] Hour [{DateTime.Now,-10:HH}] [{1063.342,15:N2}] feet");

    ```


    > [!NOTE]

    > Bu çevrimiçi kodlama önizleme modunda deneyimidir. Lütfen bunları sorunlarla karşılaşırsanız, rapor [dotnet/deneyin depoyu üzerinde](https://github.com/dotnet/try/issues).
- content: "Dize ilişkilendirme quickstart tamamladınız. \n\nKendi yerel geliştirme ortamında bu quickstarts devam edebilirsiniz. Temel bilgileri öğrenmek [yerel geliştirme](local-environment.md) ve bir Hızlı Başlangıç'ı seçin. Aynı Bu hızlı başlangıç deneyin, sonraki hızlı başlangıç doğrudan taşımak veya yeniden başlayın [C# numaraları](numbers-in-csharp-local.md) hızlı başlangıç.\n\nDaha fazla bilgi için bkz: [dize ilişkilendirme](../language-reference/tokens/interpolated.md) konu ve [dize ilişkilendirme C#](../tutorials/string-interpolation.md) Öğreticisi."
