### YamlMime:Tutorial
title: Hello C#
metadata:
  title: Hello World interactive tutorial - C# quickstarts
  description: "Bu hızlı başlangıç C# etkileşimli olarak öğrenmek için tarayıcınızın kullanacaksınız. C# kod yazma ve derleme ve kodunuzu doğrudan tarayıcıda çalıştırma sonuçları görüntüleyin."
  audience: Developer
  level: Beginner
  ms.topic: get-started-article
  nextTutorialHref: numbers-in-csharp
  nextTutorialTitle: "C# numaraları"
  displayType: two-column
  interactive: csharp
  ms.custom: mvc
  ms.prod: .net
  ms.technology: devlang-csharp
  ms.openlocfilehash: b29e927275d674281ee176cc9d550b6c52b050ce
  ms.sourcegitcommit: be1fb5d9447ad459bef22b91a91c72e3e0b2d916
  ms.translationtype: MT
  ms.contentlocale: tr-TR
  ms.lasthandoff: 02/09/2018
items:
- durationInMinutes: 1
  content: "Bu hızlı başlangıç C# etkileşimli olarak yazma C# ve derleme ve kodunuzu çalıştırmaya sonuçlarını görmek için tarayıcınızı kullanarak öğretilmektedir. \"Hello World\" programla başlamak dersleri bir dizi içerir. Bu derslerin C# dil temelleri öğretir.\n"
- title: "İlk C# programınızı çalıştırma"
  durationInMinutes: 2
  content: "Aşağıdaki kod etkileşimli penceresinde çalıştırın. Bunu yapmak için aşağıdaki kod bloğu etkileşimli penceresinde yazın ve tıklatın **çalıştırmak** düğmesi:\n\n```csharp\nConsole.WriteLine(\"Hello World!\");\n```\n\nTebrikler! İlk C# programınız çalıştırdıysanız. \"Hello World!\" iletisi yazdırır basit bir programdır. Kullanıldığını <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> ileti yazdırmak için yöntem. `Console`Konsol penceresinde temsil eden bir tür değil. `WriteLine`bir yöntemi `Console` bu metin konsola metin satırının yazdırır türü.\n\nŞimdi geçmek ve daha fazlasını keşfedin. Bu ders geri kalanı ile çalışma araştırır `string` C# metin temsil eden tür. Gibi `Console` türü, `string` türüne sahip yöntemleri. `string` Yöntemler metni ile çalışır. \n\n> [!NOTE]\n> Bu çevrimiçi kodlama önizleme modunda deneyimidir. Lütfen bunları sorunlarla karşılaşırsanız, rapor [dotnet/deneyin depoyu üzerinde](https://github.com/dotnet/try/issues).\n"
- title: "Bildirme ve değişkenleri kullanma"
  durationInMinutes: 3
  content: "İlk programınızı yazdırılan `string` \"Hello World!\" ekranda. \n\n> [!TIP]\n> C# (veya herhangi bir programlama dili) keşfetmenizde kodu yazarken hataları hale getireceğiz. **Derleyici** bu hatalarını bulmak ve bunları sizin için rapor. Çıktı, hata iletileri içerdiğinde, örnek kod ve düzeltmek görmek için etkileşimli penceresinde kod yakından bakın.\n> Bu alıştırmada, C# kod yapısını öğrenmenize yardımcı olur. \n\nİlk Programınızı bir ileti yazdırmaya sınırlıdır. Kullanarak daha kullanışlı programlar yazabilirsiniz **değişkenleri**. A **değişkeni** farklı değerlerle aynı kodu çalıştırmak için kullanabileceğiniz bir simge. Şimdi deneyin! Aşağıdaki kod ile etkileşimli penceresinde yazdığınız kodu değiştirin:\n\n```csharp\nstring aFriend = \"Bill\";\nConsole.WriteLine(aFriend);\n```\n\nİlk satır bir değişken bildiren `aFriend` ve bir değer, \"Fatura\" atar. İkinci satır adı yazdırır.\n\nBildirdiğiniz herhangi bir değişken için farklı değerler atayabilirsiniz. Arkadaşlarınıza birine adını değiştirebilirsiniz. Bu iki satır zaten eklediğiniz koddan etkileşimli penceresinde ekleyin:\n\n```csharp\naFriend = \"Maria\";\nConsole.WriteLine(aFriend);\n```\n\nKod aynı satır içinde depolanan değer bağlı olarak iki farklı iletileri yazdırır fark `aFriend` değişkeni.\n\nAynı zamanda \"Hello\" word son iki iletilerinde eksik olduğunu fark etmiş olabilirsiniz. Şimdi, şimdi düzeltin.  Aşağıdaki iletiye yazdırma satırları değiştirin:\n\n```csharp\nConsole.WriteLine(\"Hello \" + aFriend);\n```\n\nTıklatın **çalıştırmak** yeniden sonuçları görüntüleyin.\n\nBiz ilerledikçe kullanarak yazdırma dizeler oluşturma `+` kullanışsız hale gelir. Dize ilişkilendirme olanak tanır birlikte dizeleri daha kısa ve okunabilir bir biçimde parçası.\n\nEklerseniz bir `$` dizesinin açılış tırnak önce dize ifadeler gibi sonra içeren `aFriend` değişken dizesi süslü ayraç içinde içinde.\n\n\n```csharp\nConsole.WriteLine($\"Hello {aFriend}\");\n```\n\nTıklatın **çalıştırmak** yeniden sonuçları görüntüleyin.\n\n> [!NOTE]\n> Bu çevrimiçi kodlama önizleme modunda deneyimidir. Lütfen bunları sorunlarla karşılaşırsanız, rapor [dotnet/deneyin depoyu üzerinde](https://github.com/dotnet/try/issues).\n"
- title: "Dizeleri ile çalışma"
  durationInMinutes: 5
  content: "Son düzenlemeniz dizelerle neler yapabileceğiniz bizim ilk bakış oluştu. Daha fazla inceleyelim.\n\n`+` Bir işleç C# ' de denir. Dizelere uygulandığında ister `firstString + secondString`, yeni bir dize ikinci metinden arkasından ilk metinden oluşturulur. Bu olarak adlandırılır *dizelerle*. Dize, dize değişkenleri de dahil olmak üzere herhangi bir sayıda birleştirebilirsiniz.  Şunu deneyin:\n\n```csharp\nstring firstFriend = \"Maria\";\nstring secondFriend = \"Sage\";\nConsole.WriteLine($\"My friends are {firstFriend} and {secondFriend}\");\n```\n\nDizelerle daha keşfetmenizde kullanarak bir dize uzunluğu bulabilirsiniz `Length`. `Length`olan bir **özelliği** dize ve onu o dizesindeki karakterlerin sayısını döndürür. Etkileşimli penceresinin alt kısmında aşağıdaki kodu ekleyin:\n\n```csharp\nConsole.WriteLine($\"The name {firstFriend} has {firstFriend.Length} letters.\");\nConsole.WriteLine($\"The name {secondFriend} has {secondFriend.Length} letters.\");\n```\n\n> [!TIP]\n> Bu, kendi kendinize araştırmak için iyi bir zamandır. Öğrendiğinize `Console.WriteLine()` metin ekrana yazar. Değişkenleri bildirme ve birlikte dizeyi birleştirmek nasıl öğrendiniz. Etkileşimli pencerede deneyin. Bazı daha fazla ileti kendiniz yazın. Kullanarak dizeleri yapı `+` işleci.\n\n> [!NOTE]\n> Bu çevrimiçi kodlama önizleme modunda deneyimidir. Lütfen bunları sorunlarla karşılaşırsanız, rapor [dotnet/deneyin depoyu üzerinde](https://github.com/dotnet/try/issues).\n"
- title: Dizeleri bitirdiniz
  durationInMinutes: 5
  content: "Kullanmakta olduğunuz bir **yöntemi**, <xref:System.Console.WriteLine%2A?displayProperty=nameWithType>, iletileri yazdırmak için. A **yöntemi** bazı eylemleri uygulayan kod bloğu. Bunu erişebilmesi için bir adı vardır. \n\n`string` Türüne sahip çok sayıda kullanışlı yöntemler. İnceleyelim <xref:System.String.Trim%2A> yöntemi ve ilgili yöntemleri <xref:System.String.TrimStart%2A> ve <xref:System.String.TrimEnd%2A>. Bu yöntemler öndeki ve sondaki boşlukları kaldırın:\n\n```csharp\nstring greeting = \"      Hello World!       \";\nConsole.WriteLine($\"[{greeting}]\");\n\nstring trimmedGreeting = greeting.TrimStart();\nConsole.WriteLine($\"[{trimmedGreeting}]\");\n\ntrimmedGreeting = greeting.TrimEnd();\nConsole.WriteLine($\"[{trimmedGreeting}]\");\n\ntrimmedGreeting = greeting.Trim();\nConsole.WriteLine($\"[{trimmedGreeting}]\");\n```\n\nBu örnek birkaç Dizelerle çalışmaya yönelik önemli kavramları eklenir. Dizeleri işlemek yöntemleri yerinde değişiklikler yapmak yerine yeni string nesneleri döndürür. Görebilirsiniz herhangi biri her çağrı `Trim` yöntemleri yeni bir dize verir, ancak özgün ileti değiştirmez.\n\nBir dizeyle çalışabilecek diğer yöntemler vardır. Örneğin, büyük olasılıkla bir arama kullanmış olduğunuz ve bir düzenleyici veya sözcük işlemci komutu değiştirin. <xref:System.String.Replace%2A> Yöntemi benzer bir şey olmadığından bir `string`. Bir alt dizeyi arar ve farklı bir metinle değiştirir. <xref:System.String.Replace%2A> Yöntemi iki alan **parametreleri**. Bunlar parantez dizelerdir. Birinci aramak için metin dizesidir. İkinci ile değiştirmek için metin dizesidir. Kendiniz için deneyin. Bu kodu ekleyin:\n\n```csharp\nstring sayHello = \"Hello World!\";\nConsole.WriteLine(sayHello);\nsayHello = sayHello.Replace(\"Hello\", \"Greetings\");\nConsole.WriteLine(sayHello);\n```\n\nDiğer kullanışlı yöntemler iki dize tüm büyük harf ya da tüm küçük olun. Aşağıdaki kod deneyin:\n\n```csharp\nConsole.WriteLine(sayHello.ToUpper());\nConsole.WriteLine(sayHello.ToLower());\n```\n\n> [!NOTE]\n> Bu çevrimiçi kodlama önizleme modunda deneyimidir. Lütfen bunları sorunlarla karşılaşırsanız, rapor [dotnet/deneyin depoyu üzerinde](https://github.com/dotnet/try/issues).\n"
- title: Arama dizelerini
  durationInMinutes: 10
  content: "Diğer parçası bir *arama ve değiştirme* işlemdir metin dizesi içinde bulunamıyor. Kullanabileceğiniz <xref:System.String.Contains%2A> arama yöntemi. Bir dize içindeki bir alt dizeyi içerip içermediğini belirtir. Keşfetmek için aşağıdaki kodu deneyin <xref:System.String.Contains%2A>:\n\n```csharp\nstring songLyrics = \"You say goodbye, and I say hello\";\nConsole.WriteLine(songLyrics.Contains(\"goodbye\"));\nConsole.WriteLine(songLyrics.Contains(\"greetings\"));\n```\n\n<xref:System.String.Contains%2A> Yöntemi döndürür bir **boolean** arama için dize bulundu belirten değer. A **boolean** ya da depolayan bir `true` veya `false` değeri. Daha fazla hakkında bilgi edineceksiniz **boolean** sonraki Ders değerleri.\n\n***Challenge***\n\nBenzer iki yöntem vardır <xref:System.String.StartsWith%2A> ve <xref:System.String.EndsWith%2A> de arayan bir dizedeki alt dizeleri. Bunlar, başında veya dizenin sonunda bir alt dizeyi bulur. Kullanmak için önceki örnek değiştirmeye çalışmadan <xref:System.String.StartsWith%2A> ve <xref:System.String.EndsWith%2A> yerine <xref:System.String.Contains%2A>. \"Siz\" veya bir dizenin başında \"goodbye\" için arama yapın. \"Hello\" veya bir dizenin sonunda \"goodbye\" için arama yapın.\n\n> [!Note]\n> Metin dizesinin sonunda için test ettiğinizde, noktalama izleyin. Dize bir nokta ile sona ererse, bir nokta ile biten bir dize işaretlemeniz gerekir.\n\nAlması gereken `true` \",\" ile başlayan ve \"hello\" ve \"goodbye\" ile biten veya başlayarak yanlış biter. \n\n> [!NOTE]\n> Bu çevrimiçi kodlama önizleme modunda deneyimidir. Lütfen bunları sorunlarla karşılaşırsanız, rapor [dotnet/deneyin depoyu üzerinde](https://github.com/dotnet/try/issues).\n"
- title: "Tam sınama"
  durationInMinutes: 3
  content: "Aşağıdakine benzer ile gündeme?\n\n```csharp\nstring songLyrics = \"You say goodbye, and I say hello\";\nConsole.WriteLine(songLyrics.StartsWith(\"You\"));\nConsole.WriteLine(songLyrics.StartsWith(\"goodbye\"));\n\nConsole.WriteLine(songLyrics.EndsWith(\"hello\"));\nConsole.WriteLine(songLyrics.EndsWith(\"goodbye\"));\n```\n\n> [!NOTE]\n> Bu çevrimiçi kodlama önizleme modunda deneyimidir. Lütfen bunları sorunlarla karşılaşırsanız, rapor [dotnet/deneyin depoyu üzerinde](https://github.com/dotnet/try/issues).\n"
- content: "\"Hello C#\" Hızlı Başlangıç tamamladınız.\n\nİle çalışma hakkında daha fazla bilgiyi `string` yazın [C# programlama kılavuzu](../programming-guide/index.md) konuyla ilgili [dizeleri](../programming-guide/strings/index.md).\n[Dizeleri ipuçları nasıl](../how-to/index.md#strings).\0"
